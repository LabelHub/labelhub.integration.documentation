# INSTALLING:
#
# 1. Run as administrator:
#   PS> Install-Module -Name AWS.Tools.Installer
#   PS> Install-AWSToolsModule AWS.Tools.S3 -Scope AllUsers
# Note: These CAN be run without the scope-parameter if this is prefered, 
#       but then they'll have to run as the user who is going to run the script in the end.
#
# 2. Update settings:
#   - Set $bucketName in this file to the value supplied by LabelHub
#   - Set AccessKey and Secret in awscredentials.ini
#
# 3. Setup scheduled task in Windows.
#

# Constant - AWS S3 settings
$bucketName = "{Insert supplied bucketname here}"

# Constants - Directories
$scriptPath = Split-Path $MyInvocation.MyCommand.Path -Parent
$basePath = $scriptPath #Override this to move the data directories to somewhere else
$profilelocation = $scriptPath + "\awscredentials.ini"  #Override this if credentials are not stored with script

#
# !!! It should not be nessesary to change anything below this line !!!
# 

# Keys on AWS S3
$targetKeyXml = "from-erp-to-labelhub/todo/xml/"

$sourceKey1upPdf = "from-labelhub-to-erp/1up-pdf/"
$sourceKey1upThumbnail = "from-labelhub-to-erp/1up-thumbnail/"
$sourceKeySRPdf = "from-labelhub-to-erp/sr-pdf/"

# Directories where files generated by LabelHub should be placed
$incomingFolder1UpPdf = $basePath + "\incoming\1up-pdf"
$incomingFolder1UpThumbnail = $basePath + "\incoming\1up-thumbnail"
$incomingFolderSRPdf = $basePath + "\incoming\sr-pdf"

# Directory from where XML-files should be sent to LabelHub
$outgoingFolder = $basePath + "\outgoing\xml"

# Make sure all paths exists
mkdir -Force $incomingFolder1UpPdf | Out-Null
mkdir -Force $incomingFolder1UpThumbnail | Out-Null
mkdir -Force $incomingFolderSRPdf | Out-Null
mkdir -Force $outgoingFolder | Out-Null

# Ship all XML-files in the outgoing folder to S3
$outgoingFiles = Get-ChildItem $outgoingFolder -Filter *.xml
foreach ($file in $outgoingFiles) {
  # Specify the key for the file on S3
  $key = $targetKeyXml + $file

  # "Move" the files
  Write-Output "Uploading ${file} to ${key}"
  Write-S3Object -BucketName $bucketName -File $file.FullName -Key $key -ProfileLocation $profilelocation
  Remove-Item $file.FullName
}

# Get all 1up PDFs from S3
$incoming1UpPDFFiles = Get-S3Object -BucketName $bucketName -Prefix $sourceKey1upPdf -ProfileLocation $profilelocation
foreach ($file in $incoming1UpPDFFiles) {
  # AWS will return the basepath as a key aswell, filter this out
  $filekey = $file.Key
  if ($filekey -ne $sourceKey1upPdf){
    $localFilename = $incomingFolder1UpPdf + "\" + $filekey.Split("/")[-1]

    # "Move" the files
    Write-Output "Downloading ${filekey} to ${localFilename}"
    Read-S3Object -BucketName $bucketName -Key $filekey -File $localFilename -ProfileLocation $profilelocation | Out-Null
    Remove-S3Object -BucketName $bucketName -Key $filekey -ProfileLocation $profilelocation -Force | Out-Null
  }
}

# Get all 1up thumbnails from S3
$incoming1UpThumbnailFiles = Get-S3Object -BucketName $bucketName -Prefix $sourceKey1upThumbnail -ProfileLocation $profilelocation
foreach ($file in $incoming1UpThumbnailFiles) {
  # AWS will return the basepath as a key aswell, filter this out
  $filekey = $file.Key
  if ($filekey -ne $sourceKey1upThumbnail){
    $localFilename = $incomingFolder1UpThumbnail + "\" + $filekey.Split("/")[-1]

    # "Move" the files
    Write-Output "Downloading ${filekey} to ${localFilename}"
    Read-S3Object -BucketName $bucketName -Key $filekey -File $localFilename -ProfileLocation $profilelocation | Out-Null
    Remove-S3Object -BucketName $bucketName -Key $filekey -ProfileLocation $profilelocation -Force | Out-Null
  }
}

# Get all SR PDFs from S3
$incomingSRPdfFiles = Get-S3Object -BucketName $bucketName -Prefix $sourceKeySRPdf -ProfileLocation $profilelocation
foreach ($file in $incomingSRPdfFiles) {
  # AWS will return the basepath as a key aswell, filter this out
  $filekey = $file.Key
  if ($filekey -ne $sourceKeySRPdf){
    $localFilename = $incomingFolderSRPdf + "\" + $filekey.Split("/")[-1]

    # "Move" the files    
    Write-Output "Downloading ${filekey} to ${localFilename}"
    Read-S3Object -BucketName $bucketName -Key $filekey -File $localFilename -ProfileLocation $profilelocation | Out-Null
    Remove-S3Object -BucketName $bucketName -Key $filekey -ProfileLocation $profilelocation -Force | Out-Null
  }
}
